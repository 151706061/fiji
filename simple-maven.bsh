#!/bin/sh
/*/. 2>/dev/null; exec fiji "$0" "$@" # TODO: make Fiji-agnostic? */

import java.io.File;
import java.io.FileInputStream;

import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;

import org.xml.sax.helpers.DefaultHandler;

class POM extends DefaultHandler {
	protected final boolean debug = false;

	protected POM parent;

	protected String groupId, artifactId, version;
	protected Map properties = new HashMap();
	protected List modules = new ArrayList();

	// only used during parsing
	protected String prefix = "";

	public static POM parse(File file, POM parent) {
		// work around Beanshell not liking null parameters to constructors
		POM pom = parent == null ? new POM(file) : new POM(file, parent);
		reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
		reader.setContentHandler(pom);
		//reader.setXMLErrorHandler(...);
		reader.parse(new InputSource(new FileInputStream(file)));
		return pom;
	}

	// work around Beanshell borking on null parameters to constructors
	public POM(File file) {
		this.file = file;
	}

	public POM(File file, POM parent) {
		this.file = file;
		this.parent = parent;
		if (parent != null) {
			version = parent.version;
		}
	}

	public String getGroup() {
		return groupId;
	}

	public String getArtifact() {
		return artifactId;
	}

	public String getVersion() {
		return version;
	}

	public String getTarget() {
		return groupId.replace('.', '/') + '/' + artifactId + '-' + version + ".jar";
	}

	public void startDocument() {}
	public void endDocument() {}

	public void startElement(String uri, String name, String qualifiedName, Attributes attributes) {
		prefix += ">" + qualifiedName;
		if (debug)
			System.err.println("start(" + uri + ", " + name + ", " + qualifiedName + ", " + toString(attributes) + ")");
	}

	public void endElement(String uri, String name, String qualifiedName) {
		prefix = prefix.substring(0, prefix.length() - 1 - qualifiedName.length());
		if (debug)
			System.err.println("end(" + uri + ", " + name + ", " + qualifiedName + ")");
	}

	public void characters(char[] buffer, int offset, int length) {
		if (debug)
			System.err.println("characters: " + new String(buffer, offset, length) + " (prefix: " + prefix + ")");
		if (prefix.equals(">project>groupId"))
			groupId = new String(buffer, offset, length);
		else if (prefix.equals(">project>artifactId"))
			artifactId = new String(buffer, offset, length);
		else if (prefix.equals(">project>version"))
			version = new String(buffer, offset, length);
		else if (prefix.equals(">project>modules>module"))
			modules.add(new String(buffer, offset, length));
		else if (prefix.startsWith(">project>properties>"))
			properties.put(prefix.substring(">project>properties>".length()), new String(buffer, offset, length));
		else if (debug)
			print("Ignoring " + prefix);
	}

	public String toString(Attributes attributes) {
		StringBuilder builder = new StringBuilder();
		builder.append("[ ");
		for (int i = 0; i < attributes.getLength(); i++)
			builder.append(attributes.getQName(i))
				. append("='").append(attributes.getValue(i))
				. append("' ");
		builder.append("]");
		return builder.toString();
	}
}

root = null;
root = POM.parse(new File("pom.xml"), root);
