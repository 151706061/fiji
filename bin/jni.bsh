#!/bin/sh
/*/. 2>/dev/null; exec "$(dirname "$0")"/../fiji "$0" "$@" # exec with fiji */

/*
 * This is a quick script to get some JNA building going. Eventually, we'll
 * have to integrate it into the Fiji Build, as it has to know about what
 * is source and what to do with it...
 */
if (bsh.args.length < 3) {
	System.err.println("Usage: " + this.interpreter.getSourceFileInfo() + " <library> <path-to-java-class-source> <path-to-c-file>...");
	System.exit(1);
}

// array helpers

String[] sublist(String[] list, int start, int end) {
	String[] result = new String[end - start];
	System.arraycopy(list, start, result, 0, result.length);
	return result;
}

String[] sublist(String[] list, int start) {
	return sublist(list, start, list.length);
}

String[] append(String[] list1, String[] list2) {
	String[] result = new String[list1.length + list2.length];
	System.arraycopy(list1, 0, result, 0, list1.length);
	System.arraycopy(list2, 0, result, list1.length, list2.length);
	return result;
}

// make temporary directory (for .class and .h file)

File tmpDirectory = File.createTempFile("jni-", "");
tmpDirectory.delete();
if (!tmpDirectory.mkdir())
	throw new IOException("Could not make a temporary directory!");

// maybe this is a Mac? Or Windows?

boolean isMac = System.getProperty("os.name").startsWith("Mac");
boolean isWin = System.getProperty("os.name").startsWith("Windows");

// helper for finding Java stuff

File getJavaStuff(String relativePath) {
	String javaHome = System.getProperty("java.home");
	File file = new File(javaHome, relativePath);
	if (!file.exists()) {
		if (javaHome.endsWith("/jre") || javaHome.endsWith("/Home"))
			file = new File(javaHome, "../" + relativePath);
		if (!file.exists())
			throw new IOException("Could not find " + relativePath);
	}
	return file;
}

// find the .jar containing javac

File toolsJar = getJavaStuff(isMac ? "Classes/classes.jar" : "lib/tools.jar");
toolsJar = new File(System.getProperty("fiji.dir") + "/jars/javac.jar");

// make a class loader for javac

addClassPath(toolsJar.getAbsolutePath());

// compile the Java class

com.sun.tools.javac.Main.compile(new String[] {
	"-classpath", System.getProperty("java.class.path")
		+ ":" + System.getProperty("fiji.dir") + "/jars/fiji-lib.jar"
		+ ":" + System.getProperty("fiji.dir") + "/jars/ij.jar",
	"-d", tmpDirectory.getAbsolutePath(),
	bsh.args[1] });

import java.util.List;
List addClasses(List list, File directory, String packageName) {
	for (File file : directory.listFiles()) {
		String name = file.getName();
		if (name.startsWith("."))
			continue;
		String prefix = packageName.equals("") ? "" : packageName + ".";
		if (file.isDirectory())
			addClasses(list, file, prefix + name);
		else if (name.endsWith(".class"))
			list.add(prefix + name.substring(0, name.length() - 6));
	}
	return list;
}

import java.util.ArrayList;
List classes = addClasses(new ArrayList(), tmpDirectory, "");

// add classes necessary for the SimpleExecuter to be found

addClassPath(System.getProperty("fiji.dir") + "/jars/ij.jar");
addClassPath(System.getProperty("fiji.dir") + "/jars/Fiji.jar");

String[] cmdarray = append(new String[] {
		System.getProperty("fiji.executable"),
		"--javah",
		"-classpath", tmpDirectory.getAbsolutePath(),
		"-d", tmpDirectory.getAbsolutePath()
	}, classes.toArray(new String[classes.size()]));
command = new fiji.SimpleExecuter(cmdarray);
print(command.getError());
print(command.getOutput());
if (command.getExitCode() != 0)
	throw new IOException("Failed to run javah");

// run gcc

new File(bsh.args[0]).getParentFile().mkdirs();

// TODO: set cwd correctly
String[] cflagsLinux = {
	"-shared",
	"-fPIC",
	"-Wl,-rpath,$ORIGIN/",
};
String[] cflagsMacOSX = {
	"-arch", "i386", "-arch", "x86_64",
	"-bundle",
	"-dynamic",
	"-Wl,-rpath,$ORIGIN/",
};
String[] cflagsWindows = {
	"-shared",
};
cmdarray = append(append(new String[] {
		"gcc",
		"-I", tmpDirectory.getAbsolutePath(),
		"-I", System.getProperty("fiji.dir") + "/includes",
		"-o", bsh.args[0]
	}, isMac ? cflagsMacOSX : (isWin ? cflagsWindows : cflagsLinux)),
	sublist(bsh.args, 2));
command = new fiji.SimpleExecuter(cmdarray);
print(command.getError());
print(command.getOutput());
if (command.getExitCode() != 0)
	throw new IOException("Could not run gcc");
