#!/bin/sh
// 2>&1 | :; exec "$(dirname "$0")"/../fiji "$0" "$@" # exec with fiji

import fiji.build.Fake;
import fiji.build.Fake.Parser.Rule;
import fiji.build.Fake.Parser.CompileJar;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;

import java.util.ArrayList;

setAccessibility(true);

File fijiDir = new File(System.getProperty("fiji.dir"));
String fijiPath(String name) {
	if (new File(name).isAbsolute())
		return name;
	return new File(fijiDir, name).getAbsolutePath();
}

File workspaceDirectory = new File(fijiDir, "eclipse");
workspaceDirectory.mkdirs();

Fake fake = new Fake();
Fake.Parser parser = fake.parse(new FileInputStream(new File(fijiDir, "Fakefile")), fijiDir);
parser.parseRules(new ArrayList());

File getProjectDirectory(String name) {
	File result = new File(workspaceDirectory, name);
	result.mkdirs();
	return result;
}

void saveFile(File path, String contents) {
	FileWriter writer = new FileWriter(path);
	writer.write(contents);
	writer.close();
}

String getBaseName(String name, String suffix) {
	name = fake.stripSuffix(name, suffix);
	return name.substring(name.lastIndexOf('/') + 1);
}

void generateJarProject(CompileJar rule) {
	String name = getBaseName(rule.target, ".jar");
	File projectDirectory = getProjectDirectory(name);

	String including = rule.getPrerequisiteString().replace(' ', '|');
	String stripPath = rule.getStripPath();
	if (including != null)
		including = fake.stripPrefix(including, stripPath);
	String excluding = rule.getVar("EXCLUDE");
	if (excluding != null)
		excluding = fake.stripPrefix(excluding.replace(' ', '|'), stripPath);
	String libs = "", projects = "";
	String classpath = rule.getVar("CLASSPATH");
	classpath = (classpath == null ? "" : classpath + ":") + "jars/ij.jar";
	for (String path : fake.split(classpath, ":")) {
		path = fake.stripPrefix(path, fijiDir.getAbsolutePath() + File.separator);
		libs += "\t<classpathentry kind=\"lib\" path=\"" + fijiPath(path) + "\"/>\n";
		if (parser.getRule(path) != null)
			projects += "\t\t<project>" + getBaseName(path, ".jar") + "</project>\n";
	}

	File classpathFile = new File(projectDirectory, ".classpath");
	saveFile(classpathFile, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		+ "<classpath>\n"
		+ libs
		+ "\t<classpathentry including=\"" + including + "\" kind=\"src\" path=\"" + name + "\"/>\n"
		+ (excluding == null ? "" : "        <classpathentry excluding=\"" + excluding + "\" kind=\"src\" path=\"" + name + "\"/>\n")
		+ "\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"/>\n"
		+ "\t<classpathentry kind=\"output\" path=\".build\"/>\n"
		+ "</classpath>\n");

	File projectFile = new File(projectDirectory, ".project");
	saveFile(projectFile, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		+ "<projectDescription>\n"
		+ "\t<name>" + name + "</name>\n"
		+ "\t<comment></comment>\n"
		+ "\t<projects>\n"
		+ projects
		+ "\t</projects>\n"
		+ "\t<buildSpec>\n"
		+ "\t\t<buildCommand>\n"
		+ "\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n"
		+ "\t\t\t<arguments>\n"
		+ "\t\t\t</arguments>\n"
		+ "\t\t</buildCommand>\n"

		+ "\t\t<buildCommand>\n"
		+ "\t\t\t<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>\n"
		+ "\t\t\t<triggers>incremental,</triggers>\n"
		+ "\t\t\t<arguments>\n"
		+ "\t\t\t\t<dictionary>\n"
		+ "\t\t\t\t\t<key>LaunchConfigHandle</key>\n"
		+ "\t\t\t\t\t<value>&lt;project&gt;/.externalToolBuilders/Fake.launch</value>\n"
		+ "\t\t\t\t</dictionary>\n"
		+ "\t\t\t</arguments>\n"
		+ "\t\t</buildCommand>\n"

		+ "\t</buildSpec>\n"
		+ "\t<natures>\n"
		+ "\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n"
		+ "\t</natures>\n"
		+ "\t<linkedResources>\n"
		+ "\t\t<link>\n"
		+ "\t\t\t<name>" + name + "</name>\n"
		+ "\t\t\t<type>2</type>\n"
		+ "\t\t\t<location>" + fijiPath(stripPath) + "</location>\n"
		+ "\t\t</link>\n"
		+ "\t</linkedResources>\n"
		+ "</projectDescription>\n");

	File launchDirectory = new File(projectDirectory, ".externalToolBuilders");
	launchDirectory.mkdirs();
	File fakeLaunchFile = new File(launchDirectory, "Fake.launch");
	saveFile(fakeLaunchFile, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		+ "<launchConfiguration type=\"org.eclipse.ui.externaltools.ProgramBuilderLaunchConfigurationType\">\n"
		+ "<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${system_path:java}\"/>\n"
		+ "<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"incremental,\"/>\n"
		+ "<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS\" value=\"-jar "
			+ fijiPath("jars/fake.jar") + " PREBUILTDIR(" + rule.target + ")="
			+ new File(projectDirectory, ".build").getAbsolutePath() + " " + rule.target + "\"/>\n"
		+ "<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>\n"
		+ "<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"" + fijiDir.getAbsolutePath() + "\"/>\n"
		+ "</launchConfiguration>\n");

	File settingsDirectory = new File(projectDirectory, ".settings");
	settingsDirectory.mkdirs();
	File encodingFile = new File(settingsDirectory, "org.eclipse.core.resources.prefs");
	saveFile(encodingFile, "# Written by Fiji\n"
		+ "eclipse.preferences.version=1\n"
		+ "encoding/<project>=UTF-8\n");
	File lineEndingsFile = new File(settingsDirectory, "org.eclipse.core.runtime.prefs");
	saveFile(lineEndingsFile, "#Written by Fiji\n"
		+ "eclipse.preferences.version=1\n"
		+ "line.separator=\\n\n");
}

for (String target : parser.allRules.keySet()) {
	if (target.equals("jars/javac.jar"))
		continue; // Eclipse has too many problems with that
	Rule rule = parser.getRule(target);
	if (rule instanceof CompileJar)
		generateJarProject(rule);
}
