/// FILESYSTEM HELPERS

deleteRecursively(dir) {
	for (File file : dir.listFiles())
		if (file.getName().equals(".") || file.getName().equals(".."))
			continue;
		else if (file.isDirectory())
			deleteRecursively(file);
		else if (file.isFile())
			file.delete();
	dir.delete();
}

copyTo(inputStream, outputStream) {
	byte[] buffer = new byte[16384];
	for (;;) {
		count = inputStream.read(buffer);
		if (count < 0)
			break;
		outputStream.write(buffer, 0, count);
	}
	inputStream.close();
	outputStream.close();
}

import java.io.FileInputStream;
import java.io.FileOutputStream;

copyFile(source, destination) {
	destination.getCanonicalFile().getParentFile().mkdirs();
	copyTo(new FileInputStream(source), new FileOutputStream(destination));
	if (destination.getName().equals("fiji"))
		execute(new String[] { "chmod", "a+x", destination.getAbsolutePath() });
}

fijiDir = new File(System.getProperty("fiji.executable")).getCanonicalFile().getParentFile();

import java.io.ByteArrayOutputStream;

readFile(dir, name) {
	return readStream(new FileInputStream(new File(dir, name)));
}

import java.util.zip.GZIPInputStream;

readGZippedStream(in) {
	return readStream(new GZIPInputStream(in));
}

readStream(in) {
	out = new ByteArrayOutputStream();
	copyTo(in, out);
	return out.toString().trim();
}

import java.io.PrintWriter;

writeFile(dir, name) {
	return writeFile(dir, name,name);
}

writeFile(dir, name, content) {
	file = new File(dir, name);
	file.getParentFile().mkdirs();
	writer = new PrintWriter(file);
	writer.println(content);
	writer.close();

	return file;
}

setTimestamp(file, timestamp) {
	if (!(timestamp instanceof String))
		timestamp = "" + timestamp;
	setLastModified(file, Util.timestamp2millis(timestamp));
}

import fiji.updater.util.Util;

setLastModified(file, lastModified) {
	if (file instanceof String)
		file = new File(file);
	file.setLastModified(lastModified);
}