// A library of useful variables and functions

source(new File(libDir, "general.bsh").getPath());
source(new File(libDir, "fs.bsh").getPath());
source(new File(libDir, "jar.bsh").getPath());
source(new File(libDir, "exec.bsh").getPath());
source(new File(libDir, "gui.bsh").getPath());

if (hidden == void) // not defined?
	hidden = true;

/// SETUP

testDir = libDir.getCanonicalFile().getParentFile();
tmpDeveloperRoot = new File(testDir, "tmpDeveloperRoot");
tmpUserRoot = new File(testDir, "tmpUserRoot");
tmpWebRoot = new File(testDir, "tmpWebRoot");

import fiji.updater.Updater;

import fiji.updater.logic.PluginObject;

import fiji.updater.util.Util;

Updater.MAIN_URL = "file:" + tmpWebRoot.getAbsolutePath() + "/";
Updater.UPDATE_DIRECTORY = tmpWebRoot.getAbsolutePath() + "/";

if (Util.isDeveloper)
	Updater.SSH_HOST = null;


/// DATA STRUCTURE HELPERS

requireStatus(filename, status) {
	assert(filename + " has status " + status,
		plugins.getPlugin(filename).getStatus() == status);
}

markForUpload(filename) {
	print("Marking " + filename + " for upload");
	plugins.getPlugin(filename).setAction(plugins, PluginObject.Action.UPLOAD);
}


// ADDITIONAL FILESYSTEM HELPERS

prepareNewFijiRoot(root, asDeveloper) {
	if (root.exists())
		deleteRecursively(root);
	root.mkdirs();

	toCopy = new String[] {
		"fiji",
		"jars/ij.jar", "jars/Fiji.jar", "plugins/Fiji_Updater.jar",
		"jars/bsh-2.0b4.jar", "jars/jsch-0.1.37.jar"
	};

	if (asDeveloper)
		toCopy = unshiftArray(toCopy, "fiji.c");

	for (String name : toCopy)
		copyFile(new File(fijiDir, name),  new File(root, name));
}

cleanWebRoot() {
	if (tmpWebRoot.exists())
		deleteRecursively(tmpWebRoot);
	tmpWebRoot.mkdirs();

	dbXml = writeFile(tmpWebRoot, "db.xml",
		"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		+ "<pluginRecords/>");

	execute(new String[] { "gzip", dbXml.getAbsolutePath() });
}


/// ADDITIONAL LAUNCH HELPERS

upload(bsh) {
	startFiji(tmpDeveloperRoot, "developer", bsh);
}

download(bsh) {
	startFiji(tmpUserRoot, "user", bsh);
}


/// ADDITIONAL GUI INTERACTION HELPERS

import ij.IJ;

startUpdater() {
	// The window is called ImageJA when being created
	waitForWindow("ImageJA");
	if (hidden)
		Updater.hidden = true;
	new Thread() {
		public void run() {
			IJ.run("Update Fiji");
		}
	}.start();
	print("Waiting for the updater");
	global.updaterFrame = waitForWindow("Fiji Updater");
	print("Got the updater");
	setAccessibility(true);
	global.plugins = updaterFrame.plugins;
}

waitForInformation(message) {
	waitForMessageBox("Information", message);
}

waitForWarning(message) {
	waitForMessageBox("Warning", message);
}

requireUpToDate() {
	waitForInformation("Your Fiji is up to date!");
}

requireUploadOK() {
	waitForInformation("Uploaded successfully.");
}

requireDownloadFinished() {
	waitForInformation("Updated successfully.  Please restart Fiji!");
}

requireModified() {
	waitForWarning("There are locally modified files!");
}

requireQuestion(title, question) {
	print("Waiting for the question " + title + " '" + question + "'");
	window = waitForWindow(title);
	pane = getOptionPane(window);
	if (pane.getMessage().equals(question)) {
		if (getButton(pane, "Yes") != null)
			clickButton(pane, "Yes");
		else
			clickButton(pane, "OK");
		//pane.setValue(new Integer(JOptionPane.YES_OPTION));
		//window.dispose();
		print("Okay");
	}
	else
		print("Not okay (" + title + "): " + pane.getMessage() + " instead of " + question);
}

requireUpdateUpdaterQuestion() {
	requireQuestion("Update the updater",
		"There is an update available for the Fiji Updater. Install now?");
}

advancedMode() {
	//listComponentsRecursively(updaterFrame);
	clickButton(updaterFrame, "Advanced mode");
}

viewMode(label) {
	if (!label.startsWith("View "))
		label = "View " + label;
	options = updaterFrame.viewOptions;
	selected = false;
	for (i = 0; i < options.getItemCount(); i++)
		if (options.getItemAt(i).toString().equals(label)) {
			options.setSelectedIndex(i);
			selected = true;
			break;
		}
	assert(label, selected);
}

exitWhenClosed() {
	waitUntilClosed(updaterFrame);
	System.exit(0);
}

startUpload() {
	print("Uploading");
	clickButton(updaterFrame, "Upload to server");
	requireUploadOK();
	exitWhenClosed();
}

startDownload() {
	print("Downloading");
	clickButton(updaterFrame, "Apply changes");
	requireDownloadFinished();
}


/// THE DEVELOPER/USER IMPERSONATIONS

initialUpload() {
	startUpdater();
	requireUpToDate();
	advancedMode();
	assert("5 plugins", plugins.size() == 5);
	for (PluginObject plugin : plugins)
		markForUpload(plugin.filename);
	startUpload();
}

initialUserCheck() {
	startUpdater();
	requireUpToDate();
	advancedMode();
	assert("5 plugins", plugins.size() == 5);
	for (PluginObject plugin : plugins)
		assert(plugin.filename + " is up-to-date",
			plugin.getStatus() == PluginObject.Status.INSTALLED);
	clickButton(updaterFrame, "Close");
	waitUntilClosed(updaterFrame);
	assert("db.xml.gz exists now", new File(tmpUserRoot, "db.xml.gz").exists());
	System.exit(0);
}

prepareSome() {
	print("Preparing some files");
	writeFile(tmpDeveloperRoot, "macros/new.ijm");
	writeFile(tmpDeveloperRoot, "macros/modified.ijm");
	writeFile(tmpUserRoot, "macros/modified.ijm", "modified");
}

uploadSome() {
	startUpdater();
	requireUpToDate();
	advancedMode();
	assert("7 plugins", plugins.size() == 7);
	markForUpload("macros/new.ijm");
	markForUpload("macros/modified.ijm");
	startUpload();
}

downloadSome() {
	startUpdater();
	requireModified();
	advancedMode();
	viewMode("all plugins");
	assert("7 plugins", plugins.size() == 7);
	assert("2 updateable", count(plugins.updateable(true)) == 2);
	assert("1 modified", count(plugins.locallyModified()) == 1);
	requireStatus("macros/modified.ijm", PluginObject.Status.MODIFIED);
	startDownload();
	assert("modified was left alone",
		!new File(tmpUserRoot, "update/macros/modified.ijm").exists());
	assert("new file was downloaded",
		readFile(tmpUserRoot, "update/macros/new.ijm").equals("macros/new.ijm"));
	System.exit(0);
}

prepareNewUpdater() {
	addToJar(new File(tmpDeveloperRoot, "plugins/Fiji_Updater.jar"),
		"timestamp", "Current time is " + Util.timestamp(System.currentTimeMillis()));
	writeFile(tmpDeveloperRoot, "macros/new2.ijm");
	writeFile(tmpDeveloperRoot, "macros/modified.ijm", "modified again");
	writeFile(tmpUserRoot, "macros/modified.ijm");
}

uploadNewUpdater() {
	startUpdater();
	requireModified();
	advancedMode();
	assert("8 plugins", count(plugins) == 8);
	assert("5 up-to-date", count(plugins.upToDate()) == 5);
	requireStatus("plugins/Fiji_Updater.jar", PluginObject.Status.MODIFIED);
	requireStatus("macros/new2.ijm", PluginObject.Status.NOT_FIJI);
	markForUpload("plugins/Fiji_Updater.jar");
	markForUpload("macros/new2.ijm");
	markForUpload("macros/modified.ijm");
	startUpload();
}

downloadNewUpdater() {
	dbXmlGz = new File(tmpUserRoot, "db.xml.gz");
	lastModified = dbXmlGz.lastModified();
	startUpdater();
	requireUpdateUpdaterQuestion();
	waitUntilClosed(updaterFrame);
	assert("db.xml.gz unmodified", lastModified == dbXmlGz.lastModified());
	startUpdater();
	while (count(plugins.upToDate()) != 6)
		Thread.sleep(500);
	advancedMode();
	assert("6 up-to-date", count(plugins.upToDate()) == 6);
	requireStatus("macros/modified.ijm", PluginObject.Status.UPDATEABLE);
	requireStatus("macros/new2.ijm", PluginObject.Status.NEW);
	startDownload();
	System.exit(0);
}